#lang dssl2

# Final project: Trip Planner

let eight_principles = ["Know your rights.",
    "Acknowledge your sources.",
    "Protect your work.",
    "Avoid suspicion.",
    "Do your own work.",
    "Never falsify a record or permit another person to do so.",
    "Never fabricate data, citations, or experimental results.",
    "Always tell the truth when discussing your work with your instructor."]

import cons
import 'project-lib/graph.rkt'
import 'project-lib/dictionaries.rkt'
import 'project-lib/binheap.rkt'
import sbox_hash

### Basic Types ###

#  - Latitudes and longitudes are numbers:
let Lat?  = num?
let Lon?  = num?

#  - Point-of-interest categories and names are strings:
let Cat?  = str?
let Name? = str?

### Raw Entity Types ###

#  - Raw positions are 2-element vectors with a latitude and a longitude
let RawPos? = TupC[Lat?, Lon?]

#  - Raw road segments are 4-element vectors with the latitude and
#    longitude of their first endpoint, then the latitude and longitude
#    of their second endpoint
let RawSeg? = TupC[Lat?, Lon?, Lat?, Lon?]

#  - Raw points-of-interest are 4-element vectors with a latitude, a
#    longitude, a point-of-interest category, and a name
let RawPOI? = TupC[Lat?, Lon?, Cat?, Name?]

### Contract Helpers ###

# ListC[T] is a list of `T`s (linear time):
let ListC = Cons.ListC
# List of unspecified element type (constant time):
let List? = Cons.list?


interface TRIP_PLANNER:

    # Returns the positions of all the points-of-interest that belong to
    # the given category.
    def locate_all(
            self,
            dst_cat:  Cat?           # point-of-interest category
        )   ->        ListC[RawPos?] # positions of the POIs

    # Returns the shortest route, if any, from the given source position
    # to the point-of-interest with the given name.
    def plan_route(
            self,
            src_lat:  Lat?,          # starting latitude
            src_lon:  Lon?,          # starting longitude
            dst_name: Name?          # name of goal
        )   ->        ListC[RawPos?] # path to goal

    # Finds no more than `n` points-of-interest of the given category
    # nearest to the source position.
    def find_nearby(
            self,
            src_lat:  Lat?,          # starting latitude
            src_lon:  Lon?,          # starting longitude
            dst_cat:  Cat?,          # point-of-interest category
            n:        nat?           # maximum number of results
        )   ->        ListC[RawPOI?] # list of nearby POIs

struct posn:
    let x : num?
    let y : num?
    
struct posn_set:
    let first : posn?
    let second : posn?
    
struct poi:
    let name : str?
    let category : str?
    let pos : posn?
        
class TripPlanner (TRIP_PLANNER):
    # graph representing geometric structure of positions and roads
    let graph
    # hash table that converts vertices to positions
    let ver_to_pos
    # hash table that converts positions to vertices
    let pos_to_ver
    # hash table that converts positions to a linked list
    # of the desitnations associated with each position
        # each member of the linked list has a POI
    let pos_to_dst
    # hash table of slls for each category
    let cats_to_places
    # maps names to points of interest
    let name_to_poi
    # total number of positions
    let num_dests
    
    def __init__(self, road_list, pois):
        self.graph = WuGraph(road_list.len() * 2)
        self.ver_to_pos = HashTable(road_list.len(), make_sbox_hash())
        self.pos_to_ver = HashTable(road_list.len(), make_sbox_hash())
        self.pos_to_dst = HashTable(road_list.len(), make_sbox_hash())
        self.cats_to_places = HashTable(road_list.len(), make_sbox_hash())
        self.name_to_poi = HashTable(road_list.len(), make_sbox_hash())
        self.num_dests = 0
        # add each position and vertex pair to a two-way dictionary,
        # associate each POI with its position in a dictionary
        for road in road_list:
            let pos1 = [road[0], road[1]]
            let pos2 = [road[2], road[3]]
            let r = [pos1, pos2]
            for pos in r:
                # if the position in question is not a repeat
                if not self.pos_to_ver.mem?(pos):
                    self.pos_to_ver.put(pos, self.num_dests)
                    self.pos_to_dst.put(pos, None)
                    self.ver_to_pos.put(self.num_dests, pos)
                    self.num_dests = self.num_dests + 1
            # make each road
            self.graph.set_edge(self.pos_to_ver.get(pos1), self.pos_to_ver.get(pos2),\
             self._dist(road))
        # add each POI to the assoication list for its position
        for dst in pois:
            # REPEAT CODE - FIX THIS
            let pos = posn(dst[0], dst[1])
            if not self.pos_to_dst.mem?(pos):
                self.pos_to_dst.put(pos, cons(dst, None))
            else:
                self.pos_to_dst.put(pos, cons(pos, self.pos_to_dst.get(pos)))
            if not self.cats_to_places.mem?(dst[2]):
                self.cats_to_places.put(dst[2], cons(dst, None))
            else:
                let list = self.cats_to_places.get(dst[2])
                list = cons(dst, list)
                self.cats_to_places.put(dst[2], list)
            self.name_to_poi.put(dst[3], dst)
         
        
    def _dist(self, road):
        return self._dist_(road[0], road[1], road[2], road[3])
        
    def _dist_(self, x1, y1, x2, y2):
        return (((x1 - x2)**2) + ((y1 - y2)**2)).sqrt()
    
    def locate_all(self, dst_cat):
        if not self.cats_to_places.mem?(dst_cat):
            return None
            
        let curr = self.cats_to_places.get(dst_cat)
        let pos_list = None
        while curr is not None:
            let temp = pos_list
            let repeat = False
            while temp is not None:
                if temp.data == [curr.data[0], curr.data[1]]:
                    repeat = True
                    break
                temp = temp.next
            if not repeat:
                pos_list = cons([curr.data[0], curr.data[1]], pos_list)
            curr = curr.next
        return pos_list
        
    def plan_route(self, src_lat, src_lon, dst_name):
        
        if not self.name_to_poi.mem?(dst_name) or \
         not self.pos_to_ver.mem?([src_lat, src_lon]):
             return None
        
        let dist = [inf; self.num_dests]
        let pred = [None; self.num_dests]
        # WHAT ABOUT WHEN ITS NONE
        # jk i don't think that's a thing
        let todo = BinHeap(self.num_dests, λ x, y: x[1] < y[1])
        let done = [False; self.num_dests]
        let start = self.pos_to_ver.get([src_lat, src_lon])
        
        dist[start] = 0
        todo.insert([start, 0])
        
        while not todo.len() == 0:
            let v = todo.find_min()[0]
            todo.remove_min()
            if not done[v]:
                done[v] = True
                let curr = self.graph.get_adjacent(v)
                while curr is not None:
                    let curr_weight = self.graph.get_edge(v, curr.data)
                    if dist[v] + curr_weight < dist[curr.data]:
                        dist[curr.data] = dist[v] + curr_weight
                        pred[curr.data] = v
                        todo.insert([curr.data, curr_weight])
                    curr = curr.next
                    
        let place = self.name_to_poi.get(dst_name)
        let place_pos = [place[0], place[1]]
        let last = self.pos_to_ver.get(place_pos)
        let preds = cons(self.ver_to_pos.get(last), None)
        # HOW TO ACCOUNT FOR NO ROUTE?
        while not last == start:
            if last is None:
                return None
            last = pred[last]
            preds = cons(self.ver_to_pos.get(last), preds)
            
        return preds
        
    def find_nearby(self, src_lat, src_lon, dst_name, n):
        
        if not self.cats_to_places.mem?(dst_name) or \
         not self.pos_to_ver.mem?([src_lat, src_lon]):
            return None
        
        let curr = self.cats_to_places.get(dst_name)
        let pq = BinHeap(self.num_dests, λ x, y: x[1] < y[1])
        let dist = 0
        
        while curr is not None:
            let route = self.plan_route(src_lat, src_lon, curr.data[3])
            dist = 0
            let last = [src_lat, src_lon]
            while route is not None:
                let pos = route.data
                dist = dist + self._dist_(last[0], last[1], pos[0], pos[1])
                last = [pos[0], pos[1]]
                route = route.next
            pq.insert([curr.data, dist])
            curr = curr.next
            
        let result = None
        for i in range(n):
            if pq.len() == 0:
                return result
            let temp = pq.find_min()
            if temp is None:
                return result
            result = cons(temp[0], result)
            pq.remove_min()
        return result
        
    
#### ^^^ YOUR CODE HERE


def my_first_example():
    return TripPlanner([[0,0, 0,1], [0,0, 1,0]],
                       [[0,0, "bar", "The Empty Bottle"],
                        [0,1, "food", "Pelmeni"]])

test 'My first locate_all test':
    assert my_first_example().locate_all("food") == \
        cons([0,1], None)

test 'My first plan_route test':
   assert my_first_example().plan_route(0, 0, "Pelmeni") == \
       cons([0,0], cons([0,1], None))
       
test 'My second plan_route test':
   assert my_first_example().plan_route(1, 0, "Pelmeni") == \
       cons([1,0], cons([0,0], cons([0,1], None)))

test 'My first find_nearby test':
    assert my_first_example().find_nearby(0, 0, "food", 1) == \
        cons([0,1, "food", "Pelmeni"], None)

def example_from_handout():
    return TripPlanner([[0,0, 1,0], [0,0, 0,1], [1,0, 1,1], [0,1, 1,1], \
    [0,1, 0,2], [1,1, 1,2], [0,2, 1,2], [1,2, 1,3], [1,3, -0.2, 3.3]], \
    [[0,0, "food", "Sandwiches"], [0,1, "food", "Pasta"], [1,1, "bank", "Local Credit Union"], \
    [1,3, "bar", "Bar None"], [1,3, "bar", "H Bar"], [-0.2, 3.3, "food", "Burritos"]])

test 'example locate-all queries':
    assert example_from_handout().locate_all("food") == \
        cons([0,0], cons([0,1], cons([-0.2,3.3], None)))
    assert example_from_handout().locate_all("bank") == \
        cons([1,1], None)
    assert example_from_handout().locate_all("bar") == \
        cons([1,3], None)    
    assert example_from_handout().locate_all("barber") == \
        None
        
test 'example-plan-route-queries':
    assert example_from_handout().plan_route(0, 0, "Sandwiches") == \
       cons([0,0], None)
    assert example_from_handout().plan_route(0, 1, "Sandwiches") == \
       cons([0,1], cons([0,0], None))
    assert example_from_handout().plan_route(1, 1, "Sandwiches") == \
       cons([1,1], cons([1,0], cons([0,0], None)))
    assert example_from_handout().plan_route(1, 1, "Burritos") == \
       cons([1,1], cons([1,2], cons([1,3], cons([-0.2,3.3], None))))
    assert example_from_handout().plan_route(1, 1, "Sushi") == \
       None

def pois_to_names(pois):
    let names = None
    while pois is not None:
        names = cons(pois.data[3], names)
        pois = pois.next
    return names
              
test 'example-find-nearby-queries':
    assert pois_to_names(example_from_handout().find_nearby(1,3, "food", 1)) \
        == cons("Burritos", None)
    assert pois_to_names(example_from_handout().find_nearby(0,2, "food", 1)) \
        == cons("Pasta", None)
    assert pois_to_names(example_from_handout().find_nearby(0,2, "food", 2)) \
        == cons("Pasta", cons("Sandwiches", None))
    assert pois_to_names(example_from_handout().find_nearby(0,2, "food", 3)) \
        == cons("Pasta", cons("Sandwiches", cons("Burritos", None)))
    assert pois_to_names(example_from_handout().find_nearby(0,2, "food", 4)) \
        == cons("Pasta", cons("Sandwiches", cons("Burritos", None)))
    assert pois_to_names(example_from_handout().find_nearby(0,2, "bar", 1)) \
        == cons("H Bar", None)
    assert pois_to_names(example_from_handout().find_nearby(0,2, "bar", 2)) \
        == cons("H Bar", cons("Bar None", None))
    assert pois_to_names(example_from_handout().find_nearby(0,2, "bar", 3)) \
        == cons("H Bar", cons("Bar None", None))
    assert pois_to_names(example_from_handout().find_nearby(0,2, "school", 5)) \
        == None
       
#### ^^^ YOUR CODE HERE
